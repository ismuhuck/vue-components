/**
 * 立即调用函数表达式，重点是将函数声明与函数表达式区分开来
 */

// 将函数声明包裹在圆括号里来告诉语法分析器去表达一个函数表达式。
// 在js中圆括号不能包含声明， 所以当圆括号为了包裹函数碰上了function关键字，便知道将它作为一个函数表达式去解析而不是函数声明

// 当圆括号出现在匿名函数的末尾想要调用函数时，它会默认将函数当作函数声明

// function(){}() // 会将它作为一个函数声明，而不是函数表达式，如果你不明确的告诉圆括号它是一个表达式，它会将其当作没有没有名字的函数声明并且抛出一个错误，因为函数声明需要一个名字

// 当圆括号包裹函数时，它会默认将函数作为表达式去解析，而不是函数声明

;(function() {})() // 括号内的函数代表函数立即调用表达式
;(function() {})() + // 括号内的表达式代表函数表达式
  /**
   * 只要让解析器将函数作为表达式来解析，且此时不在意返回值时，就可以作为一个自执行函数 例如：
   * 以下函数都是将函数作为表达式去解析
   */

  (function() {})()
!(function() {})() - (function() {})()
~(function() {})()

1 && (function() {})()
2 || (function() {})()
1, (function() {})()

var a = (function(num) {
  return num
})(88)

void (function() {})()
new (function() {})()
